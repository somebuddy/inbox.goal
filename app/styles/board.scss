@import 'layout/card';

$line-height: 1.5rem !default;
$column-width: 1rem !default;

$widget-width: 22.5rem;
$widget-height: 10rem;

$min-board-margin: 1rem;
$board-space: .5rem;

$page-header-overlap: ($line-height * 4 * 2 + $board-space * 0.5) + $line-height * 7; // 2 widgets + header

.box.page > header {
  padding-bottom: $page-header-overlap + $line-height*2;
}

.board {
  display: flex;
  flex-flow: column nowrap;
  align-content: flex-start;
  align-items: stretch;
  justify-content: center;

  margin: $line-height $min-board-margin;
  margin-top: -$page-header-overlap;
  padding: $board-space 0 0 $board-space;

  .box {
    @include card;
    margin: 0 $board-space $board-space 0;
    background: white;

    padding: calc(.75rem - #{$board-space / 2}) calc(1rem - #{$board-space / 2});

    height: $line-height * 4 - $board-space;
  }

  > header {
    flex: 1 1 100%;
    margin: 0;

    > .row {
      margin: 0 0 $line-height;
      justify-content: space-between;

      &.justify-end {
        justify-content: flex-end;
      }
    }
  }
}

@function board-width($cols, $width, $margin) {
  // returns board width for given element width and margin and columns
  @return $cols * ($width + $margin) + $margin;
}

@mixin goal-board($elem-width, $min-cols, $max-cols) {
  // Generate media quries for board with given columns
  @for $i from $min-cols to ($max-cols + 1) {
    $max-width: board-width($i, $elem-width, $board-space);
    $screen-width: $max-width + $min-board-margin * 2;
    @media (min-width: $screen-width) {
      max-width: $max-width;
    }
  }
}

$max-width: board-width(2, $widget-width, $board-space);
$screen-width: $max-width + $min-board-margin * 2;

.board {
  @include goal-board($widget-width, 2, 4);
}

@media (min-width: $screen-width) {
  $page-header-overlap: ($widget-height + $board-space + $board-space / 2) + 7 * $line-height; // one widgets row + header

  .box.page > header {
    padding-bottom: $page-header-overlap + $line-height*2;
  }

  .board {
    flex-flow: row wrap;
    margin: -$page-header-overlap auto $line-height;

    .box {
      flex: 0 0 $widget-width;
      height: $widget-height;
    }

    &:after { // Placeholder to fill free space in last row
      content: '';
      display: flex;
      flex: 1 1 0;
    }
  }
}

/* =============================================================================
    App boards
============================================================================= */

.goal-list,
.task-list {
  > header {
    color: white;

    .history {
      height: 4.5rem;
    }
  }
}

@media (min-width: $screen-width) {
  .board .box {
    > .main {
      .title {
        white-space: normal;
        height: $line-height*2;
        overflow-y: hidden;
        overflow-x: visible;
      }
    }

    > .secondary {
      display: flex;
      flex-flow: row wrap;

      .tags {
        flex: 1 1 100%;
      }
    }

    .goal-progress{
      // border: transparentize(#00B5EC, 0.7) 0.5rem solid;
      // border: transparentize(#000, 0.95) 0.5rem solid;
      // flex: 0 0 4.5rem;
      // width: 4.5rem;
      // height: 4.5rem;
      // border-radius: 50%;
    }
  }
}

/* =============================================================================
    Helpers and components
============================================================================= */

.justify-end {
  justify-content: flex-end;
}

.flex-splitter {
  flex: 1 1 0;
}

.barplot {
  display: none;
  flex-flow: row nowrap;
  align-content: flex-end;
  align-items: flex-end;
  justify-content: center;
  flex: 1 1 auto;
  padding: 0 2rem;

  @media (min-width: 25rem) {
    display: flex;
  }

  > .plot-bar {
    margin: 0 .25rem;
    background-color: transparentize(white, 0.8);
    flex: 0 1 1rem;
    min-width: .25rem;
    border-radius: 2px 2px 0 0;

    &.active {
      background-color: #ffc907;
      border: 1px solid transparentize(white, 0.7);
      border-bottom-color: transparent;
    }
  }
}

.row.tools {
  min-height: 3rem;
  align-items: center;
  align-content: center;
}

.dial {
  font-size: 1.5rem !important;
  font-family: 'Roboto Condensed', Impact, Arial, sans-serif !important;
  font-weight: 300 !important;
  color: white !important;
}

.column.statistics {
  flex: 0 0 auto;
}

.box.task {
  &.done {
    background: lighten(black, 95%);
    box-shadow: none !important;
    opacity: 0.5;

    &:hover {
      opacity: 1;
      border-color: lighten(black, 90%);
    }
  }
}

/* Row layout */
.box.goal {
  > .state {
    flex: 0 0 auto;
    font-size: .875rem;
    line-height: $line-height;
    white-space: nowrap;
    min-height: 1.5rem;
    margin-top: .75rem;
    display: flex;
    overflow: hidden;
    position: relative;
    flex-flow: row wrap;

    > .value,
    > .goal-progress,
    > .time {
      flex: 1 1 100%;
      display: flex;
      flex-flow: row nowrap;
      font-weight: 600;
    }

    > .value {
      font-size: .875rem;
      line-height: .875rem;
      opacity: 0.6;

      > .total {
        margin-left: auto;
      }

      > .init {
        margin-right: auto;
      }
    }

    > .time {
      font-size: 0.75rem;
      line-height: 0.75rem;
      opacity: 0.6;

      .date-from,
      .date-to {
        flex: 0 0 auto;
      }

      .date-from {
        margin-right: auto;
      }

      .date-to {
        margin-left: auto;
      }
    }

    .goal-progress {
      flex: 1 1 100%;
    }
  }

  .goal-progress {
    margin: 0.125rem 0;
    height: 0.375rem;
    background-color: transparentize(#000, 0.95);
    position: relative;

    > .line {
      content: '';
      position: absolute;
      left: 0;

      border-radius: 0 2px 2px 0;
    }

    > .line.value {
      top: 0;
      height: .25rem;
      width: 70%;
      background: transparentize(#00B5EC, 0.2);
    }

    > .line.time {
      bottom: 0;
      height: .125rem;
      width: 45%;
      background: transparentize(red, 0.5);
    }
  }
}
